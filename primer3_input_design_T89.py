"""
This file takes input from two files:
- the CDS file for T89 including all final transcripts for the Populus genome
- the xlsx file containing top10 marker genes for each (subcluster) generated by analysing Fresh-Frozen T89 Visium data
- a marker gene file containing the gene ids and sequences for each marker gene (T89)

the output file is a txt file containing primer3 instructions, to be used accordingly in the terminal:

$conda install -c bioconda primer3
$primer3_core < inputfile.txt > outputfile.txt
"""

#load packages
import pandas as pd
from Bio import SeqIO
import numpy as np
import os
import openpyxl

# Function to remove duplicates from a DataFrame column
def remove_duplicates(df, column):
    return df.drop_duplicates(subset=column)

# Read marker genes identified using differential expression analysis
de_marker_df = pd.read_excel("top10_marker_genes_T89.xlsx")
genelist_DE = de_marker_df['gene']

# Read marker genes identified based on literature on Populus Tremula
lit_marker_df = pd.read_excel("markergenes_plus_conversion.xlsx")

# Remove duplicates within each DataFrame
genelist_DE = remove_duplicates(de_marker_df, 'gene')
lit_marker_df = remove_duplicates(lit_marker_df, 'T89 ID')

# Get the number of entries in each DataFrame
num_entries_genelist_DE = genelist_DE.shape[0]
num_entries_lit_marker_df = lit_marker_df.shape[0]

# Save the number of entries to text files
with open("num_entries_genelist_DE.txt", "w") as file:
    file.write(str(num_entries_genelist_DE))

with open("num_entries_lit_marker_df.txt", "w") as file:
    file.write(str(num_entries_lit_marker_df))

# Concatenate the unique gene lists
genelist_concat = pd.concat([genelist_DE['gene'], lit_marker_df['T89 ID']], axis=0, ignore_index=True)

# Find duplicated entries
duplicates = genelist_concat[genelist_concat.duplicated(keep=False)]

# Write duplicated entries to a text file
with open('duplicated_entries.txt', 'w') as f:
    for gene_id in duplicates:
        f.write(gene_id + '\n')

# Remove duplicates and get the unique gene list
genelist_full = genelist_concat.drop_duplicates()

# Write genelist_full to a text file
with open('genelist_full.txt', 'w') as f:
    for gene_id in genelist_full:
        f.write(gene_id + '\n')

# Extract gene IDs from genelist_full
genelist_gene_ids = set(genelist_full)

# Extract and convert gene IDs from Potrx01-CDS.fa to match the format in genelist_full
fasta_gene_ids = set()
for record in SeqIO.parse("Potrx01-CDS.fa", "fasta"):
    fasta_gene_id = record.id.split('.')[0]
    # Check if the gene ID starts with 'Potrx' and 'g' followed by digits, if not, assume it's already in the correct format
    if fasta_gene_id.startswith('Potrx') and 'g' in fasta_gene_id:
        converted_gene_id = "Potrx" + fasta_gene_id.split("Potrx")[1].split("g")[0].zfill(6) + "g" + fasta_gene_id.split("g")[1]
    else:
        converted_gene_id = fasta_gene_id
    fasta_gene_ids.add(converted_gene_id)

# Check for missing gene IDs
missing_genes = genelist_gene_ids - fasta_gene_ids

# Save missing gene IDs to a text file
if missing_genes:
    print("The following gene IDs from genelist_full are missing in Potrx01-CDS.fa:")
    with open('missing_genes.txt', 'w') as f:
        for gene_id in missing_genes:
            f.write(gene_id + '\n')
    print("Missing gene IDs saved to 'missing_genes.txt'.")
else:
    print("All gene IDs from genelist_full are found in Potrx01-CDS.fa.")


# Get transcript information from fasta into dataframe
ids = []
sequences = []
for record in SeqIO.parse("Potrx01-CDS.fa", "fasta"):
    ids.append(record.id.split('.')[0])  # corresponds to gene_id
    sequences.append(str(record.seq))
seq_df = pd.DataFrame({'gene_id': ids, 'Sequence': sequences})
seq_df = seq_df[seq_df['gene_id'].isin(genelist_full)].drop_duplicates(subset=['gene_id'])

# Write txt file with primer3 instructions
with open('primer3_input_full.txt', 'w') as f:
    if not seq_df.empty:
        for _, row in seq_df.iterrows():
            f.write('SEQUENCE_ID=' + row['gene_id'] + '\n' + 'SEQUENCE_TEMPLATE=' + row['Sequence'] + '\n')
            # f.write('PRIMER_TASK=generic' + '\n') #indicate creation of hybridising probes instead of primers. For some reason this command gives an error.
            f.write('PRIMER_PICK_LEFT_PRIMER=0' + '\n')  # indicate creation of hybridising probes instead of primers
            f.write('PRIMER_PICK_INTERNAL_OLIGO=1' + '\n')  # indicate creation of hybridising probes instead of primers
            f.write('PRIMER_PICK_RIGHT_PRIMER=0' + '\n')  # indicate creation of hybridising probes instead of primers
            f.write('PRIMER_INTERNAL_MIN_SIZE=25' + '\n')  # probe size
            f.write('PRIMER_INTERNAL_OPT_SIZE=25' + '\n')  # probe size
            f.write('PRIMER_INTERNAL_SIZE=25' + '\n')  # probe size
            f.write('PRIMER_MAX_NS_ACCEPTED=1' + '\n')  # max number of unknown nucleotides
            f.write('PRIMER_INTERNAL_MIN_GC=44' + '\n')  # minimum GC percentage
            f.write('PRIMER_INTERNAL_MAX_GC=72' + '\n')  # maximum GC percentage
            f.write('PRIMER_INTERNAL_MAX_POLY_X=5' + '\n')  # maximum length of mononucleotide repeats
            f.write('PRIMER_NUM_RETURN=35' + '\n')  # number of primers to return
            f.write('PRIMER_EXPLAIN_FLAG=1' + '\n')  # get statistics of primer
            f.write('=' + '\n')  # indicate end of parameters
    else:
        f.write("No sequences found in seq_df")

