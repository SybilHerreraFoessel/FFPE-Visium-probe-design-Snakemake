"""
This file is used to generate a txt file to be used for Primer3 in the command line, for designing probes for 
a selection of marker genes, according to the probe guidelines as provided by 10X genomics.

This file takes input from two files:
- the CDS file for T89 including all final transcripts for the Populus genome
- the xlsx file containing top10 marker genes for each (subcluster) generated by analysing Fresh-Frozen T89 Visium data
- a marker gene file containing the gene ids and sequences for each marker gene (T89)

the output file is a txt file containing primer3 instructions, to be used accordingly in the terminal: 

$conda install -c bioconda primer3 
$primer3_core < inputfile.txt > outputfile.txt 
"""

#load packages  
import pandas as pd
from Bio import SeqIO 
import numpy as np 
import os 

#get list of marker genes identified using differential expression analysis 
de_marker_df = pd.read_excel("top10_marker_genes_T89.xlsx")
genelist_DE = de_marker_df['gene']

#get list of marker genes identified based on literature on Populus Tremula literature
#these markers are converted to T89 gene id's using BLAST with standard threshold values 
os.chdir("../gene_id_conversion")
lit_marker_df = pd.read_excel("markergenes_plus_conversion.xlsx")
genelist_lit = lit_marker_df['T89 ID']
os.chdir("../T89")

#merge gene list and remove duplicates 
genelist_full = pd.concat([genelist_DE, genelist_lit], axis = 0, ignore_index = True)
genelist_full = genelist_full.drop_duplicates()

#get transcript information from fasta into dataframe 
ids = []
sequences = []
for record in SeqIO.parse("Potrx01-CDS.fa", "fasta"):
    ids.append(record.id) #corresponds to gene_id
    sequences.append(str(record.seq))
d = {'transcript_id':ids,'Sequence':sequences}
seq_df = pd.DataFrame(d)
seq_df['gene_id'] = seq_df.loc[:, 'transcript_id'] #duplicate transcript_id column
seq_df['gene_id'] = seq_df['gene_id'].str.split('.').str[0] #remove part after period from gene_id
seq_df = seq_df[seq_df['gene_id'].isin(genelist_full)] #keep only genes in the df which correspond to the list of genes of interest
seq_df.sort_values(by=['transcript_id'])
seq_df = seq_df.drop_duplicates(subset=['gene_id']) #drop duplicate gene_ids, keep the first transcript (ending at .1)
seq_df = seq_df.drop(['transcript_id'], axis = 1)
seq_df = seq_df.reset_index(drop = True)
#print(seq_df.head())

#write txt file with primer3 instructions 
with open('primer3_input_full.txt', 'w') as f:
    for index, row in seq_df.iterrows():
        f.write('SEQUENCE_ID=' + row['gene_id'] + '\n' + 'SEQUENCE_TEMPLATE=' + row['Sequence'] + '\n')
        #f.write('PRIMER_TASK=generic' + '\n') #indicate creation of hybridising probes instead of primers. For some reason this command gives an error.
        f.write('PRIMER_PICK_LEFT_PRIMER=0' + '\n') #indicate creation of hybridising probes instead of primers
        f.write('PRIMER_PICK_INTERNAL_OLIGO=1' + '\n') #indicate creation of hybridising probes instead of primers
        f.write('PRIMER_PICK_RIGHT_PRIMER=0' + '\n') #indicate creation of hybridising probes instead of primers
        f.write('PRIMER_INTERNAL_MIN_SIZE=25' + '\n') #probe size
        f.write('PRIMER_INTERNAL_OPT_SIZE=25' + '\n') #probe size
        f.write('PRIMER_INTERNAL_SIZE=25' + '\n') #probe size
        f.write('PRIMER_MAX_NS_ACCEPTED=1' + '\n') #max number of unknown nucleotides 
        f.write('PRIMER_INTERNAL_MIN_GC=44' + '\n') #minimum GC percentage
        f.write('PRIMER_INTERNAL_MAX_GC=72' + '\n') #maximum GC percentage
        f.write('PRIMER_INTERNAL_MAX_POLY_X=5' + '\n') #maximum length of mononucleotide repeats
        f.write('PRIMER_NUM_RETURN=35' + '\n') #number of primers to return
        f.write('PRIMER_EXPLAIN_FLAG=1' + '\n') #get statistics of primer
        f.write('=' + '\n') #indicate end of parameters