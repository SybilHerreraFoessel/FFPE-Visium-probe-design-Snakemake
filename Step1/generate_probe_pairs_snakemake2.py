"""
This script takes an output file from primer3 command line version as input file and generates a probe pair from it.
The probes generated by primer3 function ars potential LHS probes. 

In each sequence object, multiple probe pair objects are stored containing the following information: 
- Left hand side (LHS) and Right hand side (RHS) ID
- Probe pair start site
- Probe pair end site 
- LHS and RHS sequence
- LHS and RHS GC percentage. NOTE: this is only of the hybridising part, so it does not include the probe handle in the calculation 

For each sequence, this script: 
- selects the left hand side probes which end at a T nucleotide, as instructed in 10X Genomics guidelines for probe design. 
- expands the probe 25 nucleotides starting from this T to the right to build a 25 nt long RHS probe 
- adds the probe handles to both LHS nad RHS probes 
- orders and indexes the probes based on their start site on the template sequence
- removes probes of which the RHS GC content percentage does not fall within the range of 44 - 72 
- removes probes which would "fall off" the sequence template 
- generates a file suitable to use with IDT OligoAnalyzer batch format

to be tested outside of this script:
- overlap of probes
- self complementarity 
- off target hybridisation 

LHS probe template: 5’-CCTTGGCACCCGAGAATTCCA-target_LHS-3’ 
RHS probe template: /5Phos/-target_RHS-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-3’

This script has been modified by Sybil Herrera Foessel to match snakemake
"""
# Import necessary packages
from Bio.SeqUtils import gc_fraction
from Bio.Seq import Seq
import os

# Define the Probe and Sequence classes
class Probe:
    def __init__(self):
        self.RHS_ID = ""  # ID of RHS probe
        self.LHS_ID = ""  # ID of LHS probe
        self.START = 0    # Index of first nucleotide of LHS probe on sequence template
        self.END = 0      # Index of last nucleotide of RHS probe on sequence template
        self.LHS = ""     # Left hand side sequence
        self.LHS_GC = 0   # Left hand side GC percentage
        self.RHS = ""     # Right hand side sequence
        self.RHS_GC = 0   # Right hand side GC content

class Sequence:
    def __init__(self):
        self.ID = ""          # Sequence ID
        self.TEMPLATE = ""    # Sequence template
        self.PROBES = []      # Probes belonging to that sequence

# Function to create RHS probe based on LHS probe
def create_rhs(sequence, probe):
    my_dna = Seq(sequence.TEMPLATE)
    RHS_start = int(probe.START) + 25
    RHS_end = int(RHS_start) + 25
    RHS_seq = my_dna[RHS_start:RHS_end]
    RHS_GC = str(format(float(gc_fraction(RHS_seq) * 100), '.3f'))
    RHS = str(RHS_seq) + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"  # Adding probe handle
    return RHS, RHS_GC, str(RHS_end)

# Function to process primer3 output and generate probe pairs
def process_primer3_output(primer3_output_file):
    with open(primer3_output_file, 'r') as file:
        lines = file.readlines()

    sequences = []
    new_sequence = Sequence()
    new_probe = Probe()
    probe_collection_mode = False

    for line in lines:
        if line == "=\n":  # Indicates end of a sequence query in primer3 output
            i = 0
            for probe in new_sequence.PROBES:
                probe.LHS_ID = f"{new_sequence.ID}_LHS_{i}"
                probe.RHS_ID = f"{new_sequence.ID}_RHS_{i}"
                i += 1
            sequences.append(new_sequence)
            new_sequence = Sequence()
        information = line.split('=')
        information[0] = ''.join([char for char in information[0] if not char.isdigit()])
        information[1] = information[1].replace('\n', '')

        if information[0] == "SEQUENCE_ID":
            new_sequence.ID = information[1]
        if information[0] == "SEQUENCE_TEMPLATE":
            new_sequence.TEMPLATE = information[1]

        if information[0] == "PRIMER_INTERNAL__SEQUENCE":
            if information[1][-1] == 'T':
                new_probe.LHS = "CCTTGGCACCCGAGAATTCCA" + information[1]
                probe_collection_mode = True

        if information[0] == "PRIMER_INTERNAL_" and probe_collection_mode:
            new_probe.START = information[1].split(',')[0]

        if information[0] == "PRIMER_INTERNAL__GC_PERCENT" and probe_collection_mode:
            new_probe.LHS_GC = information[1]
            new_probe.RHS, new_probe.RHS_GC, new_probe.END = create_rhs(new_sequence, new_probe)
            new_sequence.PROBES.append(new_probe)
            new_probe = Probe()
            probe_collection_mode = False

    return sequences

# Function to write probe pairs to fasta file
def write_probe_pairs_fasta(sequences, output_file):
    with open(output_file, 'w') as fasta:
        for sequence in sequences:
            for probe in sequence.PROBES:
                hyb_LHS = probe.LHS[-25:]  # Last 25 nucleotides of LHS probe
                hyb_RHS = probe.RHS[:25]   # First 25 nucleotides of RHS probe
                fasta.write(f">{probe.LHS_ID}\n{hyb_LHS + hyb_RHS}\n")

# Main function to execute processing and writing
def main(primer3_output_file, output_file):
    sequences = process_primer3_output(primer3_output_file)
    write_probe_pairs_fasta(sequences, output_file)

# Entry point of the script
if __name__ == "__main__":
    import sys
    if len(sys.argv) != 3:
        print("Usage: python generate_probe_pairs_snakemake.py <primer3_output_file> <output_file>")
        sys.exit(1)

    primer3_output_file = sys.argv[1]
    output_file = sys.argv[2]

    main(primer3_output_file, output_file)

