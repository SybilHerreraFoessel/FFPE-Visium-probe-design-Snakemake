"""
This script takes an output file from primer3 command line version as input file and generates a probe pair from it.
The probes generated by primer3 function ars potential LHS probes. 

In each sequence object, multiple probe pair objects are stored containing the following information: 
- Left hand side (LHS) and Right hand side (RHS) ID
- Probe pair start site
- Probe pair end site 
- LHS and RHS sequence
- LHS and RHS GC percentage. NOTE: this is only of the hybridising part, so it does not include the probe handle in the calculation 

For each sequence, this script: 
- selects the left hand side probes which end at a T nucleotide, as instructed in 10X Genomics guidelines for probe design. 
- expands the probe 25 nucleotides starting from this T to the right to build a 25 nt long RHS probe 
- adds the probe handles to both LHS nad RHS probes 
- orders and indexes the probes based on their start site on the template sequence
- removes probes of which the RHS GC content percentage does not fall within the range of 44 - 72 
- removes probes which would "fall off" the sequence template 
- generates a file suitable to use with IDT OligoAnalyzer batch format

to be tested outside of this script:
- overlap of probes
- self complementarity 
- off target hybridisation 

LHS probe template: 5’-CCTTGGCACCCGAGAATTCCA-target_LHS-3’ 
RHS probe template: /5Phos/-target_RHS-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA-3’

This script has been modified by Sybil Herrera Foessel to match snakemake. Also the process function
was modified:
The primary difference between the two process functions is the way they handle filtering and deletion of probes. 
The new script applies filters in one go, while the original script applies filters in separate loops and uses del with break, 
which might cause different results. 
The original script uses break to exit the loop after removing one probe, which means only the first invalid probe is removed per loop. 
This might lead to some invalid probes remaining if multiple probes fail the condition.

"""
# import packages
from Bio.SeqUtils import gc_fraction
from Bio.Seq import Seq
import os

# Define classes
class Probe:
    def __init__(self):
        self.RHS_ID = ""
        self.LHS_ID = ""
        self.START = 0
        self.END = 0
        self.LHS = ""
        self.LHS_GC = 0
        self.RHS = ""
        self.RHS_GC = 0

class Sequence:
    def __init__(self):
        self.ID = ""
        self.TEMPLATE = ""
        self.PROBES = []

# Function to create RHS probe
def create_rhs(sequence, probe):
    my_dna = Seq(sequence.TEMPLATE)
    RHS_start = int(probe.START) + 25
    RHS_end = RHS_start + 25
    RHS_seq = my_dna[RHS_start:RHS_end]
    RHS_GC = str(format(float(gc_fraction(RHS_seq) * 100), '.3f'))
    RHS = str(RHS_seq) + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
    return RHS, RHS_GC, str(RHS_end)

# Function to process input file and create probes
def process(primer3_output_file):
    with open(primer3_output_file, 'r') as file1:
        Lines = file1.readlines()
    
    sequences = []
    new_sequence = Sequence()
    new_probe = Probe()
    probe_collection_mode = False

    for line in Lines:
        if line == "=\n":
            i = 0
            for probe in new_sequence.PROBES:
                probe.LHS_ID = str(new_sequence.ID + "_LHS_" + str(i))
                probe.RHS_ID = str(new_sequence.ID + "_RHS_" + str(i))
                i += 1
            sequences.append(new_sequence)
            new_sequence = Sequence()
        information = line.split('=')
        information[0] = ''.join([i for i in information[0] if not i.isdigit()])
        information[1] = information[1].replace('\n', '')
        if information[0] == "SEQUENCE_ID":
            new_sequence.ID = information[1]
        if information[0] == "SEQUENCE_TEMPLATE":
            new_sequence.TEMPLATE = information[1]
        if information[0] == "PRIMER_INTERNAL__SEQUENCE":
            if information[1][-1] == 'T':
                new_probe.LHS = "CCTTGGCACCCGAGAATTCCA" + information[1]
                probe_collection_mode = True
        if information[0] == "PRIMER_INTERNAL_" and probe_collection_mode:
            new_probe.START = information[1].split(',')[0]
        if information[0] == "PRIMER_INTERNAL__GC_PERCENT" and probe_collection_mode:
            new_probe.LHS_GC = information[1]
            new_probe.RHS, new_probe.RHS_GC, new_probe.END = create_rhs(new_sequence, new_probe)
            new_sequence.PROBES.append(new_probe)
            new_probe = Probe()
            probe_collection_mode = False

        # Filter out probes with low GC content or those with an END position beyond the template
        new_sequence.PROBES = [probe for probe in new_sequence.PROBES 
                              if 44 <= float(probe.RHS_GC) <= 72 and int(probe.END) <= len(new_sequence.TEMPLATE)]
        new_sequence.PROBES.sort(key=lambda x: int(x.START))

    return sequences

# Main execution
if __name__ == "__main__":
    sequences = process('primer3_output.txt')
    # Write FASTA file
    with open("probe_pairs_hyb_comb.fasta", "w") as fasta:
        for sequence in sequences:
            for probe in sequence.PROBES:
                hyb_LHS = probe.LHS[-25:]
                hyb_RHS = probe.RHS[:25]
                fasta.write(">" + probe.LHS_ID + "\n" + hyb_LHS + hyb_RHS + "\n")

