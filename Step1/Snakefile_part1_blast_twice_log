# Snakefile part1 of FFPE probes design with BLAST against CDS and whole genome

# Final target rule for part1
rule all:
    input:
        "selected_probes.txt"

# Rule to create primer3 input
rule create_primer3_input:
    input:
        xlsx="Input_genes_to_pipeline.xlsx",
        ref_genome="Potra02_CDS.fa"
    output:
        "primer3_input_full.txt"
    log:
        "logs/create_primer3_input.log"
    conda:
        "probes_env.yaml"
    shell:
        """
        mkdir -p logs
        python3 primer3_input_design2.py {input.xlsx} {input.ref_genome} > {output} 2> {log}
        """

# Rule to run primer3
rule run_primer3:
    input:
        "primer3_input_full.txt"
    output:
        "primer3_output.txt"
    log:
        "logs/run_primer3.log"
    conda:
        "probes_env.yaml"
    shell:
        """
        mkdir -p logs
        primer3_core < {input} > {output} 2> {log}
        """

# Rule to generate probe pairs
rule generate_probe_pairs:
    input:
        "primer3_output.txt"
    output:
        probe_seq_files=directory("idt_files/"),
        combined_fasta="probe_pairs_hyb_comb.fasta",
        sequence_fasta_files=directory("probe_fasta_files/")
    log:
        "logs/generate_probe_pairs.log"
    conda:
        "probes_env.yaml"
    shell:
        """
        mkdir -p idt_files
        mkdir -p probe_fasta_files
        python3 generate_probe_pairs_snakemake3.py {input} {output.combined_fasta} 2> {log}
        """

# Rule to prepare BLAST database for CDS
rule prepare_blast_database_with_CDS:
    input:
        ref_cds="Potra02_CDS.fa"
    output:
        expand("db_cds/ref_cds-db.{suffix}", suffix=['ndb', 'nhr', 'nin', 'njs', 'nog', 'nos', 'not', 'nsq', 'ntf', 'nto'])
    log:
        "logs/prepare_blast_database_with_CDS.log"
    conda:
        "probes_env.yaml"
    shell:
        """
        mkdir -p db_cds
        makeblastdb -in {input.ref_cds} -dbtype nucl -parse_seqids -out db_cds/ref_cds-db 2> {log}
        """

# Rule to run BLAST against CDS
rule blast_against_CDS:
    input:
        fasta="probe_pairs_hyb_comb.fasta",
        db_files=rules.prepare_blast_database_with_CDS.output
    output:
        "probes_pairs_comb_target_specificity_CDS.txt"
    params:
        db_dir="db_cds",
        db="ref_cds-db",
        evalue=10,
        word_size=11,
        reward=1,
        penalty=-2,
        task="blastn-short"
    log:
        "logs/blast_against_CDS.log"
    conda:
        "probes_env.yaml"
    shell:
        """
        cp {input.fasta} db_cds/
        blastn -db {params.db_dir}/{params.db} -query {params.db_dir}/{input.fasta} -out {output} \
            -outfmt 6 -evalue {params.evalue} -word_size {params.word_size} \
            -reward {params.reward} -penalty {params.penalty} -task {params.task} 2> {log}
        """

# Rule to prepare BLAST database for genome
rule prepare_blast_database_with_genome:
    input:
        ref_genome="Potra02-genome.fa"
    output:
        expand("db_genome/ref_genome-db.{suffix}", suffix=['ndb', 'nhr', 'nin', 'njs', 'nog', 'nos', 'not', 'nsq', 'ntf', 'nto'])
    log:
        "logs/prepare_blast_database_with_genome.log"
    conda:
        "probes_env.yaml"
    shell:
        """
        mkdir -p db_genome
        makeblastdb -in {input.ref_genome} -dbtype nucl -parse_seqids -out db_genome/ref_genome-db 2> {log}
        """

# Rule to run BLAST against genome
rule blast_against_genome:
    input:
        fasta="probe_pairs_hyb_comb.fasta",
        db_files=rules.prepare_blast_database_with_genome.output
    output:
        "probes_pairs_comb_target_specificity_genome.txt"
    params:
        db_dir="db_genome",
        db="ref_genome-db",
        evalue=10,
        word_size=11,
        reward=1,
        penalty=-2,
        task="blastn-short"
    log:
        "logs/blast_against_genome.log"
    conda:
        "probes_env.yaml"
    shell:
        """
        cp {input.fasta} db_genome/
        blastn -db {params.db_dir}/{params.db} -query {params.db_dir}/{input.fasta} -out {output} \
            -outfmt 6 -evalue {params.evalue} -word_size {params.word_size} \
            -reward {params.reward} -penalty {params.penalty} -task {params.task} 2> {log}
        """

# Rule to filter probe pairs based on specificity for CDS and genome
rule target_specificity_trim_CDS_Genome:
    input:
        cds_blast="probes_pairs_comb_target_specificity_CDS.txt",
        genome_blast="probes_pairs_comb_target_specificity_genome.txt"
    output:
        trimmed_cds="trimmed_paired_probes_target_specificity_CDS.txt",
        trimmed_genome="trimmed_paired_probes_target_specificity_genome.txt"
    log:
        "logs/target_specificity_trim_CDS_Genome.log"
    conda:
        "probes_env.yaml"
    shell:
        """
        python3 target_specificity_trim_CDS_Genome.py {input.cds_blast} {input.genome_blast} {output.trimmed_cds} {output.trimmed_genome} > {log} 2>&1
        """

# Rule to select final probe pairs after blasting against both CDS and genome
rule select_probes_after_blast_twice:
    input:
        primer3_output="primer3_output.txt",
        cds_blast_output="trimmed_paired_probes_target_specificity_CDS.txt",
        genome_blast_output="trimmed_paired_probes_target_specificity_genome.txt"
    output:
        selected_probes="selected_probes.txt",
        log_process="process_log.txt"
    log:
        "logs/select_probes_after_blast_twice.log"
    conda:
        "probes_env.yaml"
    shell:
        """
        mkdir -p logs
        python3 select_probe_pairs_after_blast_twice.py {input.primer3_output} {input.cds_blast_output} {input.genome_blast_output} {output.selected_probes} 2> {log}
        """


